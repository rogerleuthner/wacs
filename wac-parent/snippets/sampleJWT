taken from
https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/
https://auth0.com/blog/2014/01/27/ten-things-you-should-know-about-tokens-and-cookies/


app.post('/authenticate', function (req, res) {
  //TODO validate req.body.username and req.body.password
  //if is invalid, return 401
  if (!(req.body.username === 'john.doe' && req.body.password === 'foobar')) {
    res.send(401, 'Wrong user or password');
    return;
  }

  var profile = {
    first_name: 'John',
    last_name: 'Doe',
    email: 'john@doe.com',
    id: 123
  };

  // We are sending the profile inside the token
  var token = jwt.sign(profile, secret, { expiresInMinutes: 60*5 });

  res.json({ token: token });
});


	
<div ng-controller="UserCtrl">
<span></span>
<form ng-submit="submit()">
  <input ng-model="user.username" type="text" name="user" placeholder="Username" />
  <input ng-model="user.password" type="password" name="pass" placeholder="Password" />
  <input type="submit" value="Login" />
</form>
</div>

myApp.controller('UserCtrl', function ($scope, $http, $window) {
	  $scope.user = {username: 'john.doe', password: 'foobar'};
	  $scope.message = '';
	  $scope.submit = function () {
	    $http
	      .post('/authenticate', $scope.user)
	      .success(function (data, status, headers, config) {
	        $window.sessionStorage.token = data.token;
	        $scope.message = 'Welcome';
	      })
	      .error(function (data, status, headers, config) {
	        // Erase the token if the user fails to log in
	        delete $window.sessionStorage.token;

	        // Handle login errors here
	        $scope.message = 'Error: Invalid user or password';
	      });
	  };
	});

myApp.factory('authInterceptor', function ($rootScope, $q, $window) {
	  return {
	    request: function (config) {
	      config.headers = config.headers || {};
	      if ($window.sessionStorage.token) {
	        config.headers.Authorization = 'Bearer ' + $window.sessionStorage.token;
	      }
	      return config;
	    },
	    response: function (response) {
	      if (response.status === 401) {
	        // handle the case where the user is not authenticated
	      }
	      return response || $q.when(response);
	    }
	  };
	});

	myApp.config(function ($httpProvider) {
	  $httpProvider.interceptors.push('authInterceptor');
	});
	
	$http({url: '/api/restricted', method: 'GET'})
	.success(function (data, status, headers, config) {
	  console.log(data.name); // Should log 'foo'
	});