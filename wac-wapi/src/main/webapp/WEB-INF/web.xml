<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  	<!-- force SSL, otherwise anything goes -->
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Force SSL on everything</web-resource-name>
			<url-pattern>/*</url-pattern>
		</web-resource-collection> 	
 		<user-data-constraint>
 			<transport-guarantee>CONFIDENTIAL</transport-guarantee>
 		</user-data-constraint>
 	</security-constraint>  

	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>	

	<filter>
		<filter-name>JWTAuthenticationFilter_roleset1</filter-name>
		<filter-class>com.cso.wac.web.JWTAuthenticationFilter</filter-class>
		<async-supported>true</async-supported> <!-- don't really use, but required since preceded EventReceiver and all in chain must be async -->
	    <init-param>
	        <param-name>roles-allowed</param-name>
	        <param-value>ROLE_USER</param-value>
	    </init-param>		
	</filter>
    
	<filter-mapping>
		<filter-name>JWTAuthenticationFilter_roleset1</filter-name>	
		<url-pattern>/UploadServlet</url-pattern>
		<!-- more mappings that need the same role/security setup can share
		- this filter instance
		 -->
	</filter-mapping>  
 
 	<!-- apply to utility servlets since they 1) need securing, 2) want ch/user id extract/handle (see JWTAuthenticationFilter.java) -->
	<filter-mapping>
		<filter-name>JWTAuthenticationFilter_roleset1</filter-name>	
		<url-pattern>/EventReceiver</url-pattern>
		<!-- more mappings that need the same role/security setup can share
		- this filter instance
		 -->
	</filter-mapping>

 	<!-- apply to utility servlets since they 1) need securing, 2) want ch/user id extract/handle (see JWTAuthenticationFilter.java) -->
	<filter-mapping>
		<filter-name>JWTAuthenticationFilter_roleset1</filter-name>	
		<url-pattern>/FileReceiver</url-pattern>
		<!-- more mappings that need the same role/security setup can share
		- this filter instance
		 -->
	</filter-mapping>
	
 	<!-- apply to utility servlets since they 1) need securing, 2) want ch/user id extract/handle (see JWTAuthenticationFilter.java) -->
	<filter-mapping>
		<filter-name>JWTAuthenticationFilter_roleset1</filter-name>	
		<url-pattern>/FileProducer</url-pattern>
		<!-- more mappings that need the same role/security setup can share
		- this filter instance
		 -->
	</filter-mapping>	

	<!-- the rest services are secured with a JAX-RS filter, not a servlet filter -->
	<!-- see com.tf.wac.wapi.secure.SecurityInterceptor -->  
  
	<!-- CORS -->
	  <filter>
	    <filter-name>CORS</filter-name>
		<!-- needed since getting errors that not all servlets/filters in the chain are async  -->
		<!-- and this ends up in the same context as the EventReceiver servlet -->	    
		<async-supported>true</async-supported>
	    <filter-class>com.thetransactioncompany.cors.CORSFilter</filter-class>
	
	    <init-param>
	        <param-name>cors.allowGenericHttpRequests</param-name>
	        <param-value>true</param-value>
	    </init-param>
	
	    <init-param>
	        <param-name>cors.allowOrigin</param-name>
	        <param-value>*</param-value>
	    </init-param>
	
	    <init-param>
	        <param-name>cors.allowSubdomains</param-name>
	        <param-value>false</param-value>
	    </init-param>
	
	    <init-param>
	        <param-name>cors.supportedHeaders</param-name>
	        <param-value>*</param-value>
	    </init-param>
	
	    <init-param>
	        <param-name>cors.supportsCredentials</param-name>
	        <param-value>true</param-value>
	    </init-param>
	
	    <init-param>
	        <param-name>cors.maxAge</param-name>
	        <param-value>3600</param-value>
	    </init-param>
	
	</filter>
	

	<filter-mapping>
	    <filter-name>CORS</filter-name>
	    <url-pattern>*</url-pattern>
	</filter-mapping>  

  
</web-app>